@startuml Infrastructure

!include <C4/C4>
!include <C4/C4_Container>

title "C4. Инфроструктура"

package "Яндекс.Облако" as cloud {
    package "Kubernetes Cluster" as k8sCluster {
        Container(nginx, "Nginx", "Nginx", "Обратный прокси и балансировщик нагрузки")

        package "Statistic Pod" as statPod {
             Container(statService, "Sport Statistic Service", "Go", "Управление статистикой игроков, команд и матчей")
        }

        package "Forecast Pod" as forecastPod {
            Container(forecastService, "Forecast Service", "Go", "Управление прогнозами на матч")
        }

        package "Review Pod" as reviewPod {
            Container(reviewService, "Review Service", "Go", "Управление обзорами матчей")
        }

        package "User Pod" as userPod {
            Container(userService, "User Service", "Go", "Управление регистрацией, аутентификацией и авторизацией пользователей")
        }
        
        package "Analytic Pod" as analyticPod {
            Container(analyticService, "Analytic Service", "Go", "Сравнение статистик и генерация отчетов")
        }

        package "Media Content Pod" as mediaContentPod {
            Container(mediaContentService, "Media Content Service", "Go", "Загрузка и сохранение медиаконтента")
        }

        package "Notification Pod" as notificationPod {
            Container(notificationService, "Notification Service", "Go", "Обработка событий и формирование контента уведомлений")
        }
    }

    package "Rabbit Cluster" as rabbitCluster {
        Container(eventBus, "Event Bus", "RabbitMQ", "Асинхронное взаимодействие между сервисами")
    }

    package "Яндекс Cache Server" as cacheServer {
        Container(redisCacheStat, "Redis Cache Stat", "Redis", "Кэширование запросов для ускорения доступа к данным о игроках, командах и матчах")
        Container(redisCacheForecast, "Redis Cache Forecast", "Redis", "Кэширование запросов для ускорения доступа к данным о прогнозах")
        Container(redisCacheReview, "Redis Cache Review", "Redis", "Кэширование запросов для ускорения доступа к данным об обзорах")
    }

    package "Яндекс Data Center" as dataCenter {
        package "User DB Server" as userDBServer {
            Container(userMasterDB, "Master", "PostgreSQL", "Основная база данных пользователя")
            Container(userReplicaDB, "Replica", "PostgreSQL", "Реплика базы данных пользователя")
        }

        package "Sport Stat DB Server" as statDBServer {
            Container(statMasterDB, "Master", "PostgreSQL", "Основная база данных спортивной статистики")
            Container(statReplicaDB, "Replica", "PostgreSQL", "Реплика базы данных спортивной статистики")
        }

        package "Forecast DB Server" as forecastDBServer {
            Container(forecastMasterDB, "Master", "PostgreSQL", "Основная база данных прогнозов")
            Container(forecastReplicaDB, "Replica", "PostgreSQL", "Реплика базы данных прогнозов")
        }

        package "Review DB Server" as reviewDBServer {
            Container(reviewMasterDB, "Master", "PostgreSQL", "Основная база данных обзоров")
            Container(reviewReplicaDB, "Replica", "PostgreSQL", "Реплика базы данных обзоров")
        }
    }
}

package "Object Server" as objectServer {
    Container(mediaContentStorage, "Media Content Storage", "Dropbox", "Хранение изобравжений и видео")
}

System_Ext(notificationSystem, "Система уведомлений", "Информирование пользователей о начале матча, результатах матчей и событиях")
System_Ext(videoSystem, "Система управления видеофрагментами", "Хранение, организация и обработка видеофайлов.")

Rel(nginx, userPod, "Проксирование запросов", "HTTP")
Rel(nginx, statPod, "Проксирование запросов", "HTTP")
Rel(nginx, analyticPod, "Проксирование запросов", "HTTP")
Rel(nginx, forecastPod, "Проксирование запросов", "HTTP")
Rel(nginx, reviewPod, "Проксирование запросов", "HTTP")
Rel(nginx, mediaContentPod, "Проксирование запросов", "HTTP")
Rel(nginx, notificationPod, "Проксирование запросов", "HTTP")

Rel(k8sCluster, rabbitCluster, "Публикация событий о статистике, прогнозах и обзорах", "Kafka Producer API")

Rel(notificationService, notificationSystem, "Отправка уведомлений", "HTTPS/REST")
Rel(mediaContentService, videoSystem, "Хранение и предоставление доступа к видеофрагментам матчей", "HTTP/REST")

Rel(statService, redisCacheStat, "Кэширование запросов к статистике", "Redis Protocol")
Rel(forecastService, redisCacheForecast, "Кэширование запросов к прогнозам", "Redis Protocol")
Rel(reviewService, redisCacheReview, "Кэширование запросов к обзорам", "Redis Protocol")

Rel(k8sCluster, dataCenter, "Чтение/Запись", "JDBC")
Rel(userMasterDB, userReplicaDB, "Репликация", "Streaming")
Rel(statMasterDB, statReplicaDB, "Репликация", "Streaming")
Rel(forecastMasterDB, forecastReplicaDB, "Репликация", "Streaming")
Rel(reviewMasterDB, reviewReplicaDB, "Репликация", "Streaming")

Rel(mediaContentService, mediaContentStorage, "Сохранение медиаконтента", "S3 API")

k8sCluster ---[hidden]---> dataCenter

@enduml